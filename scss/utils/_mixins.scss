@use 'sass:math';
@use 'sass:string';
@import 'variables';

@mixin breakpoint($breakpoint) {
  // If the key exists in the map
  @if map-has-key($breakpoints, $breakpoint) {
    // Prints a media query based on the value
    @media #{inspect(map-get($breakpoints, $breakpoint))} {
      @content;
    }
  }

  // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

@function getSize($number) {
  @if $number {
    @return (
      string.unquote(
        string.insert(string.quote(#{math.pow($number, 2)}), 'px', -1)
      )
    );
  } @else {
    @return null;
  }
}

@mixin m($t: 1, $r: null, $b: null, $l: null) {
  @if ($t and $r and $b and $l) {
    @include mt($t);
    @include mr($r);
    @include mb($b);
    @include ml($l);
  } @else if ($t and $r and $b and not $l) {
    @include mt($t);
    @include mx($r);
    @include mb($b);
  } @else if ($t and $r and not $b and not $l) {
    @include my($t);
    @include mx($r);
  } @else if ($t and not $r and not $b and not $l) {
    @if ($t == 'auto') {
      @include my(0); //be explicit about what the browser does
      @include mx(auto);
    } @else {
      @include my($t);
      @include mx($t);
    }
  } @else {
    @error "m(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects m($size), m($y, $x), m($t, $x, $b) or m($t, $r, $b, $l)";
  }
}

@mixin mx($r: 1, $l: null) {
  @if ($r and $l) {
    @include mr($r);
    @include ml($l);
  } @else if ($r and not $l) {
    @include mr($r);
    @include ml($r);
  } @else {
    @error "mx(#{$r}, #{$l}): Invalid parameters. Expects mx($size) or mx($r, $l)";
  }
}

@mixin my($t: 1, $b: null) {
  @if ($t and $b) {
    @include mt($t);
    @include mb($b);
  } @else if ($t and not $b) {
    @include mt($t);
    @include mb($t);
  } @else {
    @error "my(#{$t}, #{$b}): Invalid parameters. Expects my($size) or my($t, $b)";
  }
}

@mixin ml($size: 1) {
  @if ($size == 'auto') {
    margin-left: auto;
  } @else {
    margin-left: getSize($size);
  }
}

@mixin mt($size: 1) {
  margin-top: getSize($size);
}

@mixin mr($size: 1) {
  @if ($size == 'auto') {
    margin-right: auto;
  } @else {
    margin-right: getSize($size);
  }
}

@mixin mb($size: 1) {
  margin-bottom: getSize($size);
}

@mixin p($t: 1, $r: null, $b: null, $l: null) {
  @if ($t and $r and $b and $l) {
    @include pt($t);
    @include pr($r);
    @include pb($b);
    @include pl($l);
  } @else if ($t and $r and $b and not $l) {
    @include pt($t);
    @include px($r);
    @include pb($b);
  } @else if ($t and $r and not $b and not $l) {
    @include py($t);
    @include px($r);
  } @else if ($t and not $r and not $b and not $l) {
    @include py($t);
    @include px($t);
  } @else {
    @error "p(#{$t}, #{$r}, #{$b}, #{$l}): Invalid parameters. Expects p($size), p($y, $x), p($t, $x, $b) or p($t, $r, $b, $l)";
  }
}

@mixin px($r: 1, $l: null) {
  @if ($r and $l) {
    @include pr($r);
    @include pl($l);
  } @else if ($r and not $l) {
    @include pr($r);
    @include pl($r);
  } @else {
    @error "px(#{$r}, #{$l}): Invalid parameters. Expects px($size) or px($r, $l)";
  }
}

@mixin py($t: 1, $b: null) {
  @if ($t and $b) {
    @include pt($t);
    @include pb($b);
  } @else if ($t and not $b) {
    @include pt($t);
    @include pb($t);
  } @else {
    @error "py(#{$t}, #{$b}): Invalid parameters. Expects py($size) or py($t, $b)";
  }
}

@mixin pl($size: 1) {
  padding-left: getSize($size);
}

@mixin pt($size: 1) {
  padding-top: getSize($size);
}

@mixin pr($size: 1) {
  padding-right: getSize($size);
}

@mixin pb($size: 1) {
  padding-bottom: getSize($size);
}
